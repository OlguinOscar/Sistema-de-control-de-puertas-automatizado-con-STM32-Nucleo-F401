
practica3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ee8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800107c  0800107c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800107c  0800107c  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800107c  0800107c  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800107c  0800107c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800107c  0800107c  0001107c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001080  08001080  00011080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08001084  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000004c  20000014  08001098  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08001098  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003364  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000c9a  00000000  00000000  000233eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000398  00000000  00000000  00024088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000293  00000000  00000000  00024420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000143a9  00000000  00000000  000246b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000432e  00000000  00000000  00038a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00080924  00000000  00000000  0003cd8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000c90  00000000  00000000  000bd6b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000be340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001064 	.word	0x08001064

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	08001064 	.word	0x08001064

080001d4 <hacia_arriba>:
int derecha_arriba; // botones
int derecha_abajo; // botones
int alterno_arriba; // botones
int alterno_abajo; // botones

void hacia_arriba(int enable, int motorpin1, int motorpin2){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0
 80001da:	60f8      	str	r0, [r7, #12]
 80001dc:	60b9      	str	r1, [r7, #8]
 80001de:	607a      	str	r2, [r7, #4]
    HAL_GPIO_WritePin(GPIOA, motorpin1, GPIO_PIN_RESET);
 80001e0:	68bb      	ldr	r3, [r7, #8]
 80001e2:	b29b      	uxth	r3, r3
 80001e4:	2200      	movs	r2, #0
 80001e6:	4619      	mov	r1, r3
 80001e8:	480a      	ldr	r0, [pc, #40]	; (8000214 <hacia_arriba+0x40>)
 80001ea:	f000 fefd 	bl	8000fe8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, motorpin2, GPIO_PIN_SET);
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	b29b      	uxth	r3, r3
 80001f2:	2201      	movs	r2, #1
 80001f4:	4619      	mov	r1, r3
 80001f6:	4807      	ldr	r0, [pc, #28]	; (8000214 <hacia_arriba+0x40>)
 80001f8:	f000 fef6 	bl	8000fe8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, enable, GPIO_PIN_SET);
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	b29b      	uxth	r3, r3
 8000200:	2201      	movs	r2, #1
 8000202:	4619      	mov	r1, r3
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <hacia_arriba+0x40>)
 8000206:	f000 feef 	bl	8000fe8 <HAL_GPIO_WritePin>
}
 800020a:	bf00      	nop
 800020c:	3710      	adds	r7, #16
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	40020000 	.word	0x40020000

08000218 <hacia_abajo>:

void hacia_abajo(int enable, int motorpin1, int motorpin2){
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0
 800021e:	60f8      	str	r0, [r7, #12]
 8000220:	60b9      	str	r1, [r7, #8]
 8000222:	607a      	str	r2, [r7, #4]
    HAL_GPIO_WritePin(GPIOA, motorpin1, GPIO_PIN_SET);
 8000224:	68bb      	ldr	r3, [r7, #8]
 8000226:	b29b      	uxth	r3, r3
 8000228:	2201      	movs	r2, #1
 800022a:	4619      	mov	r1, r3
 800022c:	480a      	ldr	r0, [pc, #40]	; (8000258 <hacia_abajo+0x40>)
 800022e:	f000 fedb 	bl	8000fe8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, motorpin2, GPIO_PIN_RESET);
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	b29b      	uxth	r3, r3
 8000236:	2200      	movs	r2, #0
 8000238:	4619      	mov	r1, r3
 800023a:	4807      	ldr	r0, [pc, #28]	; (8000258 <hacia_abajo+0x40>)
 800023c:	f000 fed4 	bl	8000fe8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, enable, GPIO_PIN_SET);
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	b29b      	uxth	r3, r3
 8000244:	2201      	movs	r2, #1
 8000246:	4619      	mov	r1, r3
 8000248:	4803      	ldr	r0, [pc, #12]	; (8000258 <hacia_abajo+0x40>)
 800024a:	f000 fecd 	bl	8000fe8 <HAL_GPIO_WritePin>
}
 800024e:	bf00      	nop
 8000250:	3710      	adds	r7, #16
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	40020000 	.word	0x40020000

0800025c <motor_apagado>:

void motor_apagado(int enable, int motorpin1, int motorpin2){
 800025c:	b580      	push	{r7, lr}
 800025e:	b084      	sub	sp, #16
 8000260:	af00      	add	r7, sp, #0
 8000262:	60f8      	str	r0, [r7, #12]
 8000264:	60b9      	str	r1, [r7, #8]
 8000266:	607a      	str	r2, [r7, #4]
    HAL_GPIO_WritePin(GPIOA, motorpin1, GPIO_PIN_RESET);
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	b29b      	uxth	r3, r3
 800026c:	2200      	movs	r2, #0
 800026e:	4619      	mov	r1, r3
 8000270:	480a      	ldr	r0, [pc, #40]	; (800029c <motor_apagado+0x40>)
 8000272:	f000 feb9 	bl	8000fe8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, motorpin2, GPIO_PIN_RESET);
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	b29b      	uxth	r3, r3
 800027a:	2200      	movs	r2, #0
 800027c:	4619      	mov	r1, r3
 800027e:	4807      	ldr	r0, [pc, #28]	; (800029c <motor_apagado+0x40>)
 8000280:	f000 feb2 	bl	8000fe8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, enable, GPIO_PIN_RESET);
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	b29b      	uxth	r3, r3
 8000288:	2200      	movs	r2, #0
 800028a:	4619      	mov	r1, r3
 800028c:	4803      	ldr	r0, [pc, #12]	; (800029c <motor_apagado+0x40>)
 800028e:	f000 feab 	bl	8000fe8 <HAL_GPIO_WritePin>
}
 8000292:	bf00      	nop
 8000294:	3710      	adds	r7, #16
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	40020000 	.word	0x40020000

080002a0 <movimiento>:

void movimiento(int arriba, int abajo, int contacto_arriba, int contacto_abajo, int enable, int motorpin1, int motorpin2){
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	60f8      	str	r0, [r7, #12]
 80002a8:	60b9      	str	r1, [r7, #8]
 80002aa:	607a      	str	r2, [r7, #4]
 80002ac:	603b      	str	r3, [r7, #0]
    if (arriba && abajo){ // no aprieto nada
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d007      	beq.n	80002c4 <movimiento+0x24>
 80002b4:	68bb      	ldr	r3, [r7, #8]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d004      	beq.n	80002c4 <movimiento+0x24>
        motor_apagado(enable, motorpin1, motorpin2);
 80002ba:	6a3a      	ldr	r2, [r7, #32]
 80002bc:	69f9      	ldr	r1, [r7, #28]
 80002be:	69b8      	ldr	r0, [r7, #24]
 80002c0:	f7ff ffcc 	bl	800025c <motor_apagado>
    }
    if (!arriba && !abajo){ // los dos al mismo tiempo
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d107      	bne.n	80002da <movimiento+0x3a>
 80002ca:	68bb      	ldr	r3, [r7, #8]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d104      	bne.n	80002da <movimiento+0x3a>
        motor_apagado(enable, motorpin1, motorpin2);
 80002d0:	6a3a      	ldr	r2, [r7, #32]
 80002d2:	69f9      	ldr	r1, [r7, #28]
 80002d4:	69b8      	ldr	r0, [r7, #24]
 80002d6:	f7ff ffc1 	bl	800025c <motor_apagado>
    }
    if (!arriba && abajo){
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d110      	bne.n	8000302 <movimiento+0x62>
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d00d      	beq.n	8000302 <movimiento+0x62>
        if (!contacto_abajo){
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d105      	bne.n	80002f8 <movimiento+0x58>
            hacia_arriba(enable, motorpin1, motorpin2);
 80002ec:	6a3a      	ldr	r2, [r7, #32]
 80002ee:	69f9      	ldr	r1, [r7, #28]
 80002f0:	69b8      	ldr	r0, [r7, #24]
 80002f2:	f7ff ff6f 	bl	80001d4 <hacia_arriba>
 80002f6:	e004      	b.n	8000302 <movimiento+0x62>
        }
        else{
            motor_apagado(enable, motorpin1, motorpin2);
 80002f8:	6a3a      	ldr	r2, [r7, #32]
 80002fa:	69f9      	ldr	r1, [r7, #28]
 80002fc:	69b8      	ldr	r0, [r7, #24]
 80002fe:	f7ff ffad 	bl	800025c <motor_apagado>
        }
    }
    if (!abajo && arriba){
 8000302:	68bb      	ldr	r3, [r7, #8]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d110      	bne.n	800032a <movimiento+0x8a>
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d00d      	beq.n	800032a <movimiento+0x8a>
        if (!contacto_arriba){
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d105      	bne.n	8000320 <movimiento+0x80>
            hacia_abajo(enable, motorpin1, motorpin2);
 8000314:	6a3a      	ldr	r2, [r7, #32]
 8000316:	69f9      	ldr	r1, [r7, #28]
 8000318:	69b8      	ldr	r0, [r7, #24]
 800031a:	f7ff ff7d 	bl	8000218 <hacia_abajo>
        }
        else{
            motor_apagado(enable, motorpin1, motorpin2);
        }
    }
}
 800031e:	e004      	b.n	800032a <movimiento+0x8a>
            motor_apagado(enable, motorpin1, motorpin2);
 8000320:	6a3a      	ldr	r2, [r7, #32]
 8000322:	69f9      	ldr	r1, [r7, #28]
 8000324:	69b8      	ldr	r0, [r7, #24]
 8000326:	f7ff ff99 	bl	800025c <motor_apagado>
}
 800032a:	bf00      	nop
 800032c:	3710      	adds	r7, #16
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
	...

08000334 <proceso>:

void proceso(int arriba, int abajo){
 8000334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000336:	b087      	sub	sp, #28
 8000338:	af04      	add	r7, sp, #16
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	6039      	str	r1, [r7, #0]
    contacto_abajo_derecha = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 800033e:	2102      	movs	r1, #2
 8000340:	4837      	ldr	r0, [pc, #220]	; (8000420 <proceso+0xec>)
 8000342:	f000 fe39 	bl	8000fb8 <HAL_GPIO_ReadPin>
 8000346:	4603      	mov	r3, r0
 8000348:	461a      	mov	r2, r3
 800034a:	4b36      	ldr	r3, [pc, #216]	; (8000424 <proceso+0xf0>)
 800034c:	601a      	str	r2, [r3, #0]
    contacto_arriba_derecha = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 800034e:	2104      	movs	r1, #4
 8000350:	4833      	ldr	r0, [pc, #204]	; (8000420 <proceso+0xec>)
 8000352:	f000 fe31 	bl	8000fb8 <HAL_GPIO_ReadPin>
 8000356:	4603      	mov	r3, r0
 8000358:	461a      	mov	r2, r3
 800035a:	4b33      	ldr	r3, [pc, #204]	; (8000428 <proceso+0xf4>)
 800035c:	601a      	str	r2, [r3, #0]
    contacto_abajo_izquierda = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 800035e:	2108      	movs	r1, #8
 8000360:	482f      	ldr	r0, [pc, #188]	; (8000420 <proceso+0xec>)
 8000362:	f000 fe29 	bl	8000fb8 <HAL_GPIO_ReadPin>
 8000366:	4603      	mov	r3, r0
 8000368:	461a      	mov	r2, r3
 800036a:	4b30      	ldr	r3, [pc, #192]	; (800042c <proceso+0xf8>)
 800036c:	601a      	str	r2, [r3, #0]
    contacto_arriba_izquierda = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 800036e:	2110      	movs	r1, #16
 8000370:	482b      	ldr	r0, [pc, #172]	; (8000420 <proceso+0xec>)
 8000372:	f000 fe21 	bl	8000fb8 <HAL_GPIO_ReadPin>
 8000376:	4603      	mov	r3, r0
 8000378:	461a      	mov	r2, r3
 800037a:	4b2d      	ldr	r3, [pc, #180]	; (8000430 <proceso+0xfc>)
 800037c:	601a      	str	r2, [r3, #0]
    izquierda_arriba = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 800037e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000382:	4827      	ldr	r0, [pc, #156]	; (8000420 <proceso+0xec>)
 8000384:	f000 fe18 	bl	8000fb8 <HAL_GPIO_ReadPin>
 8000388:	4603      	mov	r3, r0
 800038a:	461a      	mov	r2, r3
 800038c:	4b29      	ldr	r3, [pc, #164]	; (8000434 <proceso+0x100>)
 800038e:	601a      	str	r2, [r3, #0]
    izquierda_abajo = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8000390:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000394:	4822      	ldr	r0, [pc, #136]	; (8000420 <proceso+0xec>)
 8000396:	f000 fe0f 	bl	8000fb8 <HAL_GPIO_ReadPin>
 800039a:	4603      	mov	r3, r0
 800039c:	461a      	mov	r2, r3
 800039e:	4b26      	ldr	r3, [pc, #152]	; (8000438 <proceso+0x104>)
 80003a0:	601a      	str	r2, [r3, #0]
    derecha_arriba = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 80003a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003a6:	481e      	ldr	r0, [pc, #120]	; (8000420 <proceso+0xec>)
 80003a8:	f000 fe06 	bl	8000fb8 <HAL_GPIO_ReadPin>
 80003ac:	4603      	mov	r3, r0
 80003ae:	461a      	mov	r2, r3
 80003b0:	4b22      	ldr	r3, [pc, #136]	; (800043c <proceso+0x108>)
 80003b2:	601a      	str	r2, [r3, #0]
    derecha_abajo = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11);
 80003b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003b8:	4819      	ldr	r0, [pc, #100]	; (8000420 <proceso+0xec>)
 80003ba:	f000 fdfd 	bl	8000fb8 <HAL_GPIO_ReadPin>
 80003be:	4603      	mov	r3, r0
 80003c0:	461a      	mov	r2, r3
 80003c2:	4b1f      	ldr	r3, [pc, #124]	; (8000440 <proceso+0x10c>)
 80003c4:	601a      	str	r2, [r3, #0]
    alterno_arriba = arriba;
 80003c6:	4a1f      	ldr	r2, [pc, #124]	; (8000444 <proceso+0x110>)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	6013      	str	r3, [r2, #0]
    alterno_abajo = abajo;
 80003cc:	4a1e      	ldr	r2, [pc, #120]	; (8000448 <proceso+0x114>)
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	6013      	str	r3, [r2, #0]

    movimiento(derecha_arriba, derecha_abajo, contacto_arriba_derecha, contacto_abajo_derecha, enable, MotorPin1, MotorPin2);
 80003d2:	4b1a      	ldr	r3, [pc, #104]	; (800043c <proceso+0x108>)
 80003d4:	6818      	ldr	r0, [r3, #0]
 80003d6:	4b1a      	ldr	r3, [pc, #104]	; (8000440 <proceso+0x10c>)
 80003d8:	6819      	ldr	r1, [r3, #0]
 80003da:	4b13      	ldr	r3, [pc, #76]	; (8000428 <proceso+0xf4>)
 80003dc:	681a      	ldr	r2, [r3, #0]
 80003de:	4b11      	ldr	r3, [pc, #68]	; (8000424 <proceso+0xf0>)
 80003e0:	681c      	ldr	r4, [r3, #0]
 80003e2:	4b1a      	ldr	r3, [pc, #104]	; (800044c <proceso+0x118>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	2504      	movs	r5, #4
 80003e8:	2608      	movs	r6, #8
 80003ea:	9602      	str	r6, [sp, #8]
 80003ec:	9501      	str	r5, [sp, #4]
 80003ee:	9300      	str	r3, [sp, #0]
 80003f0:	4623      	mov	r3, r4
 80003f2:	f7ff ff55 	bl	80002a0 <movimiento>
    movimiento(arriba, abajo, contacto_arriba_izquierda, contacto_abajo_izquierda, enable2, MotorPin3, MotorPin4);
 80003f6:	4b0e      	ldr	r3, [pc, #56]	; (8000430 <proceso+0xfc>)
 80003f8:	681a      	ldr	r2, [r3, #0]
 80003fa:	4b0c      	ldr	r3, [pc, #48]	; (800042c <proceso+0xf8>)
 80003fc:	6819      	ldr	r1, [r3, #0]
 80003fe:	4b14      	ldr	r3, [pc, #80]	; (8000450 <proceso+0x11c>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	2010      	movs	r0, #16
 8000404:	2480      	movs	r4, #128	; 0x80
 8000406:	9402      	str	r4, [sp, #8]
 8000408:	9001      	str	r0, [sp, #4]
 800040a:	9300      	str	r3, [sp, #0]
 800040c:	460b      	mov	r3, r1
 800040e:	6839      	ldr	r1, [r7, #0]
 8000410:	6878      	ldr	r0, [r7, #4]
 8000412:	f7ff ff45 	bl	80002a0 <movimiento>
}
 8000416:	bf00      	nop
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800041e:	bf00      	nop
 8000420:	40020000 	.word	0x40020000
 8000424:	20000034 	.word	0x20000034
 8000428:	20000038 	.word	0x20000038
 800042c:	2000003c 	.word	0x2000003c
 8000430:	20000040 	.word	0x20000040
 8000434:	20000044 	.word	0x20000044
 8000438:	20000048 	.word	0x20000048
 800043c:	2000004c 	.word	0x2000004c
 8000440:	20000050 	.word	0x20000050
 8000444:	20000054 	.word	0x20000054
 8000448:	20000058 	.word	0x20000058
 800044c:	20000000 	.word	0x20000000
 8000450:	20000004 	.word	0x20000004

08000454 <setup_pins>:

void setup_pins(){
 8000454:	b580      	push	{r7, lr}
 8000456:	b086      	sub	sp, #24
 8000458:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800045a:	2300      	movs	r3, #0
 800045c:	603b      	str	r3, [r7, #0]
 800045e:	4b23      	ldr	r3, [pc, #140]	; (80004ec <setup_pins+0x98>)
 8000460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000462:	4a22      	ldr	r2, [pc, #136]	; (80004ec <setup_pins+0x98>)
 8000464:	f043 0301 	orr.w	r3, r3, #1
 8000468:	6313      	str	r3, [r2, #48]	; 0x30
 800046a:	4b20      	ldr	r3, [pc, #128]	; (80004ec <setup_pins+0x98>)
 800046c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800046e:	f003 0301 	and.w	r3, r3, #1
 8000472:	603b      	str	r3, [r7, #0]
 8000474:	683b      	ldr	r3, [r7, #0]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000476:	1d3b      	adds	r3, r7, #4
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
 800047c:	605a      	str	r2, [r3, #4]
 800047e:	609a      	str	r2, [r3, #8]
 8000480:	60da      	str	r2, [r3, #12]
 8000482:	611a      	str	r2, [r3, #16]

    // Motor pins
    GPIO_InitStruct.Pin = MotorPin1 | MotorPin2 | MotorPin3 | MotorPin4 | enable | enable2;
 8000484:	2204      	movs	r2, #4
 8000486:	2308      	movs	r3, #8
 8000488:	4313      	orrs	r3, r2
 800048a:	2210      	movs	r2, #16
 800048c:	4313      	orrs	r3, r2
 800048e:	2280      	movs	r2, #128	; 0x80
 8000490:	431a      	orrs	r2, r3
 8000492:	4b17      	ldr	r3, [pc, #92]	; (80004f0 <setup_pins+0x9c>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	431a      	orrs	r2, r3
 8000498:	4b16      	ldr	r3, [pc, #88]	; (80004f4 <setup_pins+0xa0>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4313      	orrs	r3, r2
 800049e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a0:	2301      	movs	r3, #1
 80004a2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a4:	2300      	movs	r3, #0
 80004a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a8:	2300      	movs	r3, #0
 80004aa:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	4619      	mov	r1, r3
 80004b0:	4811      	ldr	r0, [pc, #68]	; (80004f8 <setup_pins+0xa4>)
 80004b2:	f000 fbfd 	bl	8000cb0 <HAL_GPIO_Init>

    // Input pins
    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13;
 80004b6:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 80004ba:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004bc:	2300      	movs	r3, #0
 80004be:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004c0:	2301      	movs	r3, #1
 80004c2:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	4619      	mov	r1, r3
 80004c8:	480b      	ldr	r0, [pc, #44]	; (80004f8 <setup_pins+0xa4>)
 80004ca:	f000 fbf1 	bl	8000cb0 <HAL_GPIO_Init>

    // Contact pins
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 80004ce:	233f      	movs	r3, #63	; 0x3f
 80004d0:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004d2:	2300      	movs	r3, #0
 80004d4:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d6:	2300      	movs	r3, #0
 80004d8:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	4619      	mov	r1, r3
 80004de:	4806      	ldr	r0, [pc, #24]	; (80004f8 <setup_pins+0xa4>)
 80004e0:	f000 fbe6 	bl	8000cb0 <HAL_GPIO_Init>
}
 80004e4:	bf00      	nop
 80004e6:	3718      	adds	r7, #24
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	40023800 	.word	0x40023800
 80004f0:	20000000 	.word	0x20000000
 80004f4:	20000004 	.word	0x20000004
 80004f8:	40020000 	.word	0x40020000

080004fc <main>:

int main(void){
 80004fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fe:	b087      	sub	sp, #28
 8000500:	af04      	add	r7, sp, #16
    HAL_Init();
 8000502:	f000 fa59 	bl	80009b8 <HAL_Init>
    setup_pins();
 8000506:	f7ff ffa5 	bl	8000454 <setup_pins>

    while(1){
        contacto_abajo_derecha = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 800050a:	2102      	movs	r1, #2
 800050c:	489a      	ldr	r0, [pc, #616]	; (8000778 <main+0x27c>)
 800050e:	f000 fd53 	bl	8000fb8 <HAL_GPIO_ReadPin>
 8000512:	4603      	mov	r3, r0
 8000514:	461a      	mov	r2, r3
 8000516:	4b99      	ldr	r3, [pc, #612]	; (800077c <main+0x280>)
 8000518:	601a      	str	r2, [r3, #0]
        contacto_arriba_derecha = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 800051a:	2104      	movs	r1, #4
 800051c:	4896      	ldr	r0, [pc, #600]	; (8000778 <main+0x27c>)
 800051e:	f000 fd4b 	bl	8000fb8 <HAL_GPIO_ReadPin>
 8000522:	4603      	mov	r3, r0
 8000524:	461a      	mov	r2, r3
 8000526:	4b96      	ldr	r3, [pc, #600]	; (8000780 <main+0x284>)
 8000528:	601a      	str	r2, [r3, #0]
        contacto_abajo_izquierda = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 800052a:	2108      	movs	r1, #8
 800052c:	4892      	ldr	r0, [pc, #584]	; (8000778 <main+0x27c>)
 800052e:	f000 fd43 	bl	8000fb8 <HAL_GPIO_ReadPin>
 8000532:	4603      	mov	r3, r0
 8000534:	461a      	mov	r2, r3
 8000536:	4b93      	ldr	r3, [pc, #588]	; (8000784 <main+0x288>)
 8000538:	601a      	str	r2, [r3, #0]
        contacto_arriba_izquierda = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 800053a:	2110      	movs	r1, #16
 800053c:	488e      	ldr	r0, [pc, #568]	; (8000778 <main+0x27c>)
 800053e:	f000 fd3b 	bl	8000fb8 <HAL_GPIO_ReadPin>
 8000542:	4603      	mov	r3, r0
 8000544:	461a      	mov	r2, r3
 8000546:	4b90      	ldr	r3, [pc, #576]	; (8000788 <main+0x28c>)
 8000548:	601a      	str	r2, [r3, #0]

        izquierda_arriba = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 800054a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800054e:	488a      	ldr	r0, [pc, #552]	; (8000778 <main+0x27c>)
 8000550:	f000 fd32 	bl	8000fb8 <HAL_GPIO_ReadPin>
 8000554:	4603      	mov	r3, r0
 8000556:	461a      	mov	r2, r3
 8000558:	4b8c      	ldr	r3, [pc, #560]	; (800078c <main+0x290>)
 800055a:	601a      	str	r2, [r3, #0]
        izquierda_abajo = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 800055c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000560:	4885      	ldr	r0, [pc, #532]	; (8000778 <main+0x27c>)
 8000562:	f000 fd29 	bl	8000fb8 <HAL_GPIO_ReadPin>
 8000566:	4603      	mov	r3, r0
 8000568:	461a      	mov	r2, r3
 800056a:	4b89      	ldr	r3, [pc, #548]	; (8000790 <main+0x294>)
 800056c:	601a      	str	r2, [r3, #0]
        derecha_arriba = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 800056e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000572:	4881      	ldr	r0, [pc, #516]	; (8000778 <main+0x27c>)
 8000574:	f000 fd20 	bl	8000fb8 <HAL_GPIO_ReadPin>
 8000578:	4603      	mov	r3, r0
 800057a:	461a      	mov	r2, r3
 800057c:	4b85      	ldr	r3, [pc, #532]	; (8000794 <main+0x298>)
 800057e:	601a      	str	r2, [r3, #0]
        derecha_abajo = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11);
 8000580:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000584:	487c      	ldr	r0, [pc, #496]	; (8000778 <main+0x27c>)
 8000586:	f000 fd17 	bl	8000fb8 <HAL_GPIO_ReadPin>
 800058a:	4603      	mov	r3, r0
 800058c:	461a      	mov	r2, r3
 800058e:	4b82      	ldr	r3, [pc, #520]	; (8000798 <main+0x29c>)
 8000590:	601a      	str	r2, [r3, #0]
        alterno_arriba = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12);
 8000592:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000596:	4878      	ldr	r0, [pc, #480]	; (8000778 <main+0x27c>)
 8000598:	f000 fd0e 	bl	8000fb8 <HAL_GPIO_ReadPin>
 800059c:	4603      	mov	r3, r0
 800059e:	461a      	mov	r2, r3
 80005a0:	4b7e      	ldr	r3, [pc, #504]	; (800079c <main+0x2a0>)
 80005a2:	601a      	str	r2, [r3, #0]
        alterno_abajo = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_13);
 80005a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005a8:	4873      	ldr	r0, [pc, #460]	; (8000778 <main+0x27c>)
 80005aa:	f000 fd05 	bl	8000fb8 <HAL_GPIO_ReadPin>
 80005ae:	4603      	mov	r3, r0
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b7b      	ldr	r3, [pc, #492]	; (80007a0 <main+0x2a4>)
 80005b4:	601a      	str	r2, [r3, #0]

        int senial = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 80005b6:	2120      	movs	r1, #32
 80005b8:	486f      	ldr	r0, [pc, #444]	; (8000778 <main+0x27c>)
 80005ba:	f000 fcfd 	bl	8000fb8 <HAL_GPIO_ReadPin>
 80005be:	4603      	mov	r3, r0
 80005c0:	607b      	str	r3, [r7, #4]
        int senial_puerta = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80005c2:	2101      	movs	r1, #1
 80005c4:	486c      	ldr	r0, [pc, #432]	; (8000778 <main+0x27c>)
 80005c6:	f000 fcf7 	bl	8000fb8 <HAL_GPIO_ReadPin>
 80005ca:	4603      	mov	r3, r0
 80005cc:	603b      	str	r3, [r7, #0]

        movimiento(derecha_arriba, derecha_abajo, contacto_arriba_derecha, contacto_abajo_derecha, enable, MotorPin1, MotorPin2);
 80005ce:	4b71      	ldr	r3, [pc, #452]	; (8000794 <main+0x298>)
 80005d0:	6818      	ldr	r0, [r3, #0]
 80005d2:	4b71      	ldr	r3, [pc, #452]	; (8000798 <main+0x29c>)
 80005d4:	6819      	ldr	r1, [r3, #0]
 80005d6:	4b6a      	ldr	r3, [pc, #424]	; (8000780 <main+0x284>)
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	4b68      	ldr	r3, [pc, #416]	; (800077c <main+0x280>)
 80005dc:	681c      	ldr	r4, [r3, #0]
 80005de:	4b71      	ldr	r3, [pc, #452]	; (80007a4 <main+0x2a8>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2504      	movs	r5, #4
 80005e4:	2608      	movs	r6, #8
 80005e6:	9602      	str	r6, [sp, #8]
 80005e8:	9501      	str	r5, [sp, #4]
 80005ea:	9300      	str	r3, [sp, #0]
 80005ec:	4623      	mov	r3, r4
 80005ee:	f7ff fe57 	bl	80002a0 <movimiento>

        if (!puerta_abierta){
 80005f2:	4b6d      	ldr	r3, [pc, #436]	; (80007a8 <main+0x2ac>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	f083 0301 	eor.w	r3, r3, #1
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d022      	beq.n	8000646 <main+0x14a>
            if (!senial_puerta && contacto_abajo_derecha && senial && contacto_abajo_izquierda){
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d144      	bne.n	8000690 <main+0x194>
 8000606:	4b5d      	ldr	r3, [pc, #372]	; (800077c <main+0x280>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d040      	beq.n	8000690 <main+0x194>
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d03d      	beq.n	8000690 <main+0x194>
 8000614:	4b5b      	ldr	r3, [pc, #364]	; (8000784 <main+0x288>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d039      	beq.n	8000690 <main+0x194>
                puerta_abierta = true;
 800061c:	4b62      	ldr	r3, [pc, #392]	; (80007a8 <main+0x2ac>)
 800061e:	2201      	movs	r2, #1
 8000620:	701a      	strb	r2, [r3, #0]
                hacia_abajo(enable, MotorPin1, MotorPin2);
 8000622:	4b60      	ldr	r3, [pc, #384]	; (80007a4 <main+0x2a8>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	2104      	movs	r1, #4
 8000628:	2208      	movs	r2, #8
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff fdf4 	bl	8000218 <hacia_abajo>
                HAL_Delay(250);
 8000630:	20fa      	movs	r0, #250	; 0xfa
 8000632:	f000 fa33 	bl	8000a9c <HAL_Delay>
                motor_apagado(enable, MotorPin1, MotorPin2);
 8000636:	4b5b      	ldr	r3, [pc, #364]	; (80007a4 <main+0x2a8>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2104      	movs	r1, #4
 800063c:	2208      	movs	r2, #8
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff fe0c 	bl	800025c <motor_apagado>
 8000644:	e024      	b.n	8000690 <main+0x194>
            }
        }
        else {
            if (senial_puerta){
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d021      	beq.n	8000690 <main+0x194>
                HAL_Delay(400);
 800064c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000650:	f000 fa24 	bl	8000a9c <HAL_Delay>
                while (!contacto_abajo_derecha){
 8000654:	e00e      	b.n	8000674 <main+0x178>
                    hacia_arriba(enable, MotorPin1, MotorPin2);
 8000656:	4b53      	ldr	r3, [pc, #332]	; (80007a4 <main+0x2a8>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	2104      	movs	r1, #4
 800065c:	2208      	movs	r2, #8
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff fdb8 	bl	80001d4 <hacia_arriba>
                    contacto_abajo_derecha = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 8000664:	2102      	movs	r1, #2
 8000666:	4844      	ldr	r0, [pc, #272]	; (8000778 <main+0x27c>)
 8000668:	f000 fca6 	bl	8000fb8 <HAL_GPIO_ReadPin>
 800066c:	4603      	mov	r3, r0
 800066e:	461a      	mov	r2, r3
 8000670:	4b42      	ldr	r3, [pc, #264]	; (800077c <main+0x280>)
 8000672:	601a      	str	r2, [r3, #0]
                while (!contacto_abajo_derecha){
 8000674:	4b41      	ldr	r3, [pc, #260]	; (800077c <main+0x280>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d0ec      	beq.n	8000656 <main+0x15a>
                }
                motor_apagado(enable, MotorPin1, MotorPin2);
 800067c:	4b49      	ldr	r3, [pc, #292]	; (80007a4 <main+0x2a8>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2104      	movs	r1, #4
 8000682:	2208      	movs	r2, #8
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff fde9 	bl	800025c <motor_apagado>
                puerta_abierta = false;
 800068a:	4b47      	ldr	r3, [pc, #284]	; (80007a8 <main+0x2ac>)
 800068c:	2200      	movs	r2, #0
 800068e:	701a      	strb	r2, [r3, #0]
            }
        }

        if (!puerta){
 8000690:	4b46      	ldr	r3, [pc, #280]	; (80007ac <main+0x2b0>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	f083 0301 	eor.w	r3, r3, #1
 8000698:	b2db      	uxtb	r3, r3
 800069a:	2b00      	cmp	r3, #0
 800069c:	d023      	beq.n	80006e6 <main+0x1ea>
            if (senial_puerta && contacto_abajo_derecha && !senial && contacto_abajo_izquierda){
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d060      	beq.n	8000766 <main+0x26a>
 80006a4:	4b35      	ldr	r3, [pc, #212]	; (800077c <main+0x280>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d05c      	beq.n	8000766 <main+0x26a>
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d159      	bne.n	8000766 <main+0x26a>
 80006b2:	4b34      	ldr	r3, [pc, #208]	; (8000784 <main+0x288>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d055      	beq.n	8000766 <main+0x26a>
                puerta = true;
 80006ba:	4b3c      	ldr	r3, [pc, #240]	; (80007ac <main+0x2b0>)
 80006bc:	2201      	movs	r2, #1
 80006be:	701a      	strb	r2, [r3, #0]
                hacia_abajo(enable2, MotorPin3, MotorPin4);
 80006c0:	4b3b      	ldr	r3, [pc, #236]	; (80007b0 <main+0x2b4>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2110      	movs	r1, #16
 80006c6:	2280      	movs	r2, #128	; 0x80
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff fda5 	bl	8000218 <hacia_abajo>
                HAL_Delay(300);
 80006ce:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006d2:	f000 f9e3 	bl	8000a9c <HAL_Delay>
                motor_apagado(enable2, MotorPin3, MotorPin4);
 80006d6:	4b36      	ldr	r3, [pc, #216]	; (80007b0 <main+0x2b4>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	2110      	movs	r1, #16
 80006dc:	2280      	movs	r2, #128	; 0x80
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff fdbc 	bl	800025c <motor_apagado>
 80006e4:	e03f      	b.n	8000766 <main+0x26a>
            }
        }
        else {
            if (senial){
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d03c      	beq.n	8000766 <main+0x26a>
                HAL_Delay(400);
 80006ec:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80006f0:	f000 f9d4 	bl	8000a9c <HAL_Delay>
                while (!contacto_abajo_izquierda){
 80006f4:	e00e      	b.n	8000714 <main+0x218>
                    hacia_arriba(enable2, MotorPin3, MotorPin4);
 80006f6:	4b2e      	ldr	r3, [pc, #184]	; (80007b0 <main+0x2b4>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	2110      	movs	r1, #16
 80006fc:	2280      	movs	r2, #128	; 0x80
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff fd68 	bl	80001d4 <hacia_arriba>
                    contacto_abajo_izquierda = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8000704:	2108      	movs	r1, #8
 8000706:	481c      	ldr	r0, [pc, #112]	; (8000778 <main+0x27c>)
 8000708:	f000 fc56 	bl	8000fb8 <HAL_GPIO_ReadPin>
 800070c:	4603      	mov	r3, r0
 800070e:	461a      	mov	r2, r3
 8000710:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <main+0x288>)
 8000712:	601a      	str	r2, [r3, #0]
                while (!contacto_abajo_izquierda){
 8000714:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <main+0x288>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d0ec      	beq.n	80006f6 <main+0x1fa>
                }
                motor_apagado(enable2, MotorPin3, MotorPin4);
 800071c:	4b24      	ldr	r3, [pc, #144]	; (80007b0 <main+0x2b4>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2110      	movs	r1, #16
 8000722:	2280      	movs	r2, #128	; 0x80
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff fd99 	bl	800025c <motor_apagado>
                puerta = false;
 800072a:	4b20      	ldr	r3, [pc, #128]	; (80007ac <main+0x2b0>)
 800072c:	2200      	movs	r2, #0
 800072e:	701a      	strb	r2, [r3, #0]
            }
        }

        while (!izquierda_arriba && alterno_arriba){
 8000730:	e019      	b.n	8000766 <main+0x26a>
            izquierda_arriba = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 8000732:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000736:	4810      	ldr	r0, [pc, #64]	; (8000778 <main+0x27c>)
 8000738:	f000 fc3e 	bl	8000fb8 <HAL_GPIO_ReadPin>
 800073c:	4603      	mov	r3, r0
 800073e:	461a      	mov	r2, r3
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <main+0x290>)
 8000742:	601a      	str	r2, [r3, #0]
            izquierda_abajo = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8000744:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000748:	480b      	ldr	r0, [pc, #44]	; (8000778 <main+0x27c>)
 800074a:	f000 fc35 	bl	8000fb8 <HAL_GPIO_ReadPin>
 800074e:	4603      	mov	r3, r0
 8000750:	461a      	mov	r2, r3
 8000752:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <main+0x294>)
 8000754:	601a      	str	r2, [r3, #0]
            proceso(izquierda_arriba, izquierda_abajo);
 8000756:	4b0d      	ldr	r3, [pc, #52]	; (800078c <main+0x290>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a0d      	ldr	r2, [pc, #52]	; (8000790 <main+0x294>)
 800075c:	6812      	ldr	r2, [r2, #0]
 800075e:	4611      	mov	r1, r2
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff fde7 	bl	8000334 <proceso>
        while (!izquierda_arriba && alterno_arriba){
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <main+0x290>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d13c      	bne.n	80007e8 <main+0x2ec>
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <main+0x2a0>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d1dd      	bne.n	8000732 <main+0x236>
        }
        while (!izquierda_abajo && alterno_abajo){
 8000776:	e037      	b.n	80007e8 <main+0x2ec>
 8000778:	40020000 	.word	0x40020000
 800077c:	20000034 	.word	0x20000034
 8000780:	20000038 	.word	0x20000038
 8000784:	2000003c 	.word	0x2000003c
 8000788:	20000040 	.word	0x20000040
 800078c:	20000044 	.word	0x20000044
 8000790:	20000048 	.word	0x20000048
 8000794:	2000004c 	.word	0x2000004c
 8000798:	20000050 	.word	0x20000050
 800079c:	20000054 	.word	0x20000054
 80007a0:	20000058 	.word	0x20000058
 80007a4:	20000000 	.word	0x20000000
 80007a8:	20000030 	.word	0x20000030
 80007ac:	20000031 	.word	0x20000031
 80007b0:	20000004 	.word	0x20000004
            izquierda_arriba = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 80007b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007b8:	4833      	ldr	r0, [pc, #204]	; (8000888 <main+0x38c>)
 80007ba:	f000 fbfd 	bl	8000fb8 <HAL_GPIO_ReadPin>
 80007be:	4603      	mov	r3, r0
 80007c0:	461a      	mov	r2, r3
 80007c2:	4b32      	ldr	r3, [pc, #200]	; (800088c <main+0x390>)
 80007c4:	601a      	str	r2, [r3, #0]
            izquierda_abajo = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 80007c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ca:	482f      	ldr	r0, [pc, #188]	; (8000888 <main+0x38c>)
 80007cc:	f000 fbf4 	bl	8000fb8 <HAL_GPIO_ReadPin>
 80007d0:	4603      	mov	r3, r0
 80007d2:	461a      	mov	r2, r3
 80007d4:	4b2e      	ldr	r3, [pc, #184]	; (8000890 <main+0x394>)
 80007d6:	601a      	str	r2, [r3, #0]
            proceso(izquierda_arriba, izquierda_abajo);
 80007d8:	4b2c      	ldr	r3, [pc, #176]	; (800088c <main+0x390>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a2c      	ldr	r2, [pc, #176]	; (8000890 <main+0x394>)
 80007de:	6812      	ldr	r2, [r2, #0]
 80007e0:	4611      	mov	r1, r2
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff fda6 	bl	8000334 <proceso>
        while (!izquierda_abajo && alterno_abajo){
 80007e8:	4b29      	ldr	r3, [pc, #164]	; (8000890 <main+0x394>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d11e      	bne.n	800082e <main+0x332>
 80007f0:	4b28      	ldr	r3, [pc, #160]	; (8000894 <main+0x398>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d1dd      	bne.n	80007b4 <main+0x2b8>
        }

        while (izquierda_arriba && !alterno_arriba){
 80007f8:	e019      	b.n	800082e <main+0x332>
            alterno_arriba = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12);
 80007fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007fe:	4822      	ldr	r0, [pc, #136]	; (8000888 <main+0x38c>)
 8000800:	f000 fbda 	bl	8000fb8 <HAL_GPIO_ReadPin>
 8000804:	4603      	mov	r3, r0
 8000806:	461a      	mov	r2, r3
 8000808:	4b23      	ldr	r3, [pc, #140]	; (8000898 <main+0x39c>)
 800080a:	601a      	str	r2, [r3, #0]
            alterno_abajo = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_13);
 800080c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000810:	481d      	ldr	r0, [pc, #116]	; (8000888 <main+0x38c>)
 8000812:	f000 fbd1 	bl	8000fb8 <HAL_GPIO_ReadPin>
 8000816:	4603      	mov	r3, r0
 8000818:	461a      	mov	r2, r3
 800081a:	4b1e      	ldr	r3, [pc, #120]	; (8000894 <main+0x398>)
 800081c:	601a      	str	r2, [r3, #0]
            proceso(alterno_arriba, alterno_abajo);
 800081e:	4b1e      	ldr	r3, [pc, #120]	; (8000898 <main+0x39c>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a1c      	ldr	r2, [pc, #112]	; (8000894 <main+0x398>)
 8000824:	6812      	ldr	r2, [r2, #0]
 8000826:	4611      	mov	r1, r2
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff fd83 	bl	8000334 <proceso>
        while (izquierda_arriba && !alterno_arriba){
 800082e:	4b17      	ldr	r3, [pc, #92]	; (800088c <main+0x390>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d01e      	beq.n	8000874 <main+0x378>
 8000836:	4b18      	ldr	r3, [pc, #96]	; (8000898 <main+0x39c>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d0dd      	beq.n	80007fa <main+0x2fe>
        }
        while (izquierda_abajo && !alterno_abajo){
 800083e:	e019      	b.n	8000874 <main+0x378>
            alterno_arriba = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12);
 8000840:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000844:	4810      	ldr	r0, [pc, #64]	; (8000888 <main+0x38c>)
 8000846:	f000 fbb7 	bl	8000fb8 <HAL_GPIO_ReadPin>
 800084a:	4603      	mov	r3, r0
 800084c:	461a      	mov	r2, r3
 800084e:	4b12      	ldr	r3, [pc, #72]	; (8000898 <main+0x39c>)
 8000850:	601a      	str	r2, [r3, #0]
            alterno_abajo = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_13);
 8000852:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000856:	480c      	ldr	r0, [pc, #48]	; (8000888 <main+0x38c>)
 8000858:	f000 fbae 	bl	8000fb8 <HAL_GPIO_ReadPin>
 800085c:	4603      	mov	r3, r0
 800085e:	461a      	mov	r2, r3
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <main+0x398>)
 8000862:	601a      	str	r2, [r3, #0]
            proceso(alterno_arriba, alterno_abajo);
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <main+0x39c>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a0a      	ldr	r2, [pc, #40]	; (8000894 <main+0x398>)
 800086a:	6812      	ldr	r2, [r2, #0]
 800086c:	4611      	mov	r1, r2
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff fd60 	bl	8000334 <proceso>
        while (izquierda_abajo && !alterno_abajo){
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <main+0x394>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	f43f ae46 	beq.w	800050a <main+0xe>
 800087e:	4b05      	ldr	r3, [pc, #20]	; (8000894 <main+0x398>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d0dc      	beq.n	8000840 <main+0x344>
    while(1){
 8000886:	e640      	b.n	800050a <main+0xe>
 8000888:	40020000 	.word	0x40020000
 800088c:	20000044 	.word	0x20000044
 8000890:	20000048 	.word	0x20000048
 8000894:	20000058 	.word	0x20000058
 8000898:	20000054 	.word	0x20000054

0800089c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <HAL_MspInit+0x4c>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008aa:	4a0f      	ldr	r2, [pc, #60]	; (80008e8 <HAL_MspInit+0x4c>)
 80008ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b0:	6453      	str	r3, [r2, #68]	; 0x44
 80008b2:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <HAL_MspInit+0x4c>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	603b      	str	r3, [r7, #0]
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <HAL_MspInit+0x4c>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c6:	4a08      	ldr	r2, [pc, #32]	; (80008e8 <HAL_MspInit+0x4c>)
 80008c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008cc:	6413      	str	r3, [r2, #64]	; 0x40
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <HAL_MspInit+0x4c>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008da:	2007      	movs	r0, #7
 80008dc:	f000 f9b4 	bl	8000c48 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e0:	bf00      	nop
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40023800 	.word	0x40023800

080008ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008f0:	e7fe      	b.n	80008f0 <NMI_Handler+0x4>

080008f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f6:	e7fe      	b.n	80008f6 <HardFault_Handler+0x4>

080008f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <MemManage_Handler+0x4>

080008fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000902:	e7fe      	b.n	8000902 <BusFault_Handler+0x4>

08000904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <UsageFault_Handler+0x4>

0800090a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000938:	f000 f890 	bl	8000a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}

08000940 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <SystemInit+0x20>)
 8000946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800094a:	4a05      	ldr	r2, [pc, #20]	; (8000960 <SystemInit+0x20>)
 800094c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000950:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	e000ed00 	.word	0xe000ed00

08000964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000964:	f8df d034 	ldr.w	sp, [pc, #52]	; 800099c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000968:	f7ff ffea 	bl	8000940 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800096c:	480c      	ldr	r0, [pc, #48]	; (80009a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800096e:	490d      	ldr	r1, [pc, #52]	; (80009a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000970:	4a0d      	ldr	r2, [pc, #52]	; (80009a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000974:	e002      	b.n	800097c <LoopCopyDataInit>

08000976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800097a:	3304      	adds	r3, #4

0800097c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800097c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800097e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000980:	d3f9      	bcc.n	8000976 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000982:	4a0a      	ldr	r2, [pc, #40]	; (80009ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000984:	4c0a      	ldr	r4, [pc, #40]	; (80009b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000988:	e001      	b.n	800098e <LoopFillZerobss>

0800098a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800098a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800098c:	3204      	adds	r2, #4

0800098e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800098e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000990:	d3fb      	bcc.n	800098a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000992:	f000 fb43 	bl	800101c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000996:	f7ff fdb1 	bl	80004fc <main>
  bx  lr    
 800099a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800099c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80009a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80009a8:	08001084 	.word	0x08001084
  ldr r2, =_sbss
 80009ac:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80009b0:	20000060 	.word	0x20000060

080009b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009b4:	e7fe      	b.n	80009b4 <ADC_IRQHandler>
	...

080009b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009bc:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <HAL_Init+0x40>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a0d      	ldr	r2, [pc, #52]	; (80009f8 <HAL_Init+0x40>)
 80009c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009c8:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <HAL_Init+0x40>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a0a      	ldr	r2, [pc, #40]	; (80009f8 <HAL_Init+0x40>)
 80009ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <HAL_Init+0x40>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a07      	ldr	r2, [pc, #28]	; (80009f8 <HAL_Init+0x40>)
 80009da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e0:	2003      	movs	r0, #3
 80009e2:	f000 f931 	bl	8000c48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009e6:	2000      	movs	r0, #0
 80009e8:	f000 f808 	bl	80009fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009ec:	f7ff ff56 	bl	800089c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009f0:	2300      	movs	r3, #0
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40023c00 	.word	0x40023c00

080009fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <HAL_InitTick+0x54>)
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <HAL_InitTick+0x58>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 f93b 	bl	8000c96 <HAL_SYSTICK_Config>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
 8000a28:	e00e      	b.n	8000a48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2b0f      	cmp	r3, #15
 8000a2e:	d80a      	bhi.n	8000a46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a30:	2200      	movs	r2, #0
 8000a32:	6879      	ldr	r1, [r7, #4]
 8000a34:	f04f 30ff 	mov.w	r0, #4294967295
 8000a38:	f000 f911 	bl	8000c5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a3c:	4a06      	ldr	r2, [pc, #24]	; (8000a58 <HAL_InitTick+0x5c>)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a42:	2300      	movs	r3, #0
 8000a44:	e000      	b.n	8000a48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000008 	.word	0x20000008
 8000a54:	20000010 	.word	0x20000010
 8000a58:	2000000c 	.word	0x2000000c

08000a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_IncTick+0x20>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	461a      	mov	r2, r3
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <HAL_IncTick+0x24>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <HAL_IncTick+0x24>)
 8000a6e:	6013      	str	r3, [r2, #0]
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	20000010 	.word	0x20000010
 8000a80:	2000005c 	.word	0x2000005c

08000a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  return uwTick;
 8000a88:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <HAL_GetTick+0x14>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	2000005c 	.word	0x2000005c

08000a9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aa4:	f7ff ffee 	bl	8000a84 <HAL_GetTick>
 8000aa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ab4:	d005      	beq.n	8000ac2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ab6:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <HAL_Delay+0x44>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	461a      	mov	r2, r3
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	4413      	add	r3, r2
 8000ac0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ac2:	bf00      	nop
 8000ac4:	f7ff ffde 	bl	8000a84 <HAL_GetTick>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	68fa      	ldr	r2, [r7, #12]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d8f7      	bhi.n	8000ac4 <HAL_Delay+0x28>
  {
  }
}
 8000ad4:	bf00      	nop
 8000ad6:	bf00      	nop
 8000ad8:	3710      	adds	r7, #16
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000010 	.word	0x20000010

08000ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f003 0307 	and.w	r3, r3, #7
 8000af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af4:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <__NVIC_SetPriorityGrouping+0x44>)
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000afa:	68ba      	ldr	r2, [r7, #8]
 8000afc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b00:	4013      	ands	r3, r2
 8000b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b16:	4a04      	ldr	r2, [pc, #16]	; (8000b28 <__NVIC_SetPriorityGrouping+0x44>)
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	60d3      	str	r3, [r2, #12]
}
 8000b1c:	bf00      	nop
 8000b1e:	3714      	adds	r7, #20
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b30:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <__NVIC_GetPriorityGrouping+0x18>)
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	0a1b      	lsrs	r3, r3, #8
 8000b36:	f003 0307 	and.w	r3, r3, #7
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	6039      	str	r1, [r7, #0]
 8000b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	db0a      	blt.n	8000b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	b2da      	uxtb	r2, r3
 8000b60:	490c      	ldr	r1, [pc, #48]	; (8000b94 <__NVIC_SetPriority+0x4c>)
 8000b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b66:	0112      	lsls	r2, r2, #4
 8000b68:	b2d2      	uxtb	r2, r2
 8000b6a:	440b      	add	r3, r1
 8000b6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b70:	e00a      	b.n	8000b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	b2da      	uxtb	r2, r3
 8000b76:	4908      	ldr	r1, [pc, #32]	; (8000b98 <__NVIC_SetPriority+0x50>)
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	f003 030f 	and.w	r3, r3, #15
 8000b7e:	3b04      	subs	r3, #4
 8000b80:	0112      	lsls	r2, r2, #4
 8000b82:	b2d2      	uxtb	r2, r2
 8000b84:	440b      	add	r3, r1
 8000b86:	761a      	strb	r2, [r3, #24]
}
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	e000e100 	.word	0xe000e100
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b089      	sub	sp, #36	; 0x24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bb0:	69fb      	ldr	r3, [r7, #28]
 8000bb2:	f1c3 0307 	rsb	r3, r3, #7
 8000bb6:	2b04      	cmp	r3, #4
 8000bb8:	bf28      	it	cs
 8000bba:	2304      	movcs	r3, #4
 8000bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	3304      	adds	r3, #4
 8000bc2:	2b06      	cmp	r3, #6
 8000bc4:	d902      	bls.n	8000bcc <NVIC_EncodePriority+0x30>
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	3b03      	subs	r3, #3
 8000bca:	e000      	b.n	8000bce <NVIC_EncodePriority+0x32>
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd4:	69bb      	ldr	r3, [r7, #24]
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	43da      	mvns	r2, r3
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	401a      	ands	r2, r3
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be4:	f04f 31ff 	mov.w	r1, #4294967295
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	fa01 f303 	lsl.w	r3, r1, r3
 8000bee:	43d9      	mvns	r1, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf4:	4313      	orrs	r3, r2
         );
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3724      	adds	r7, #36	; 0x24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
	...

08000c04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c14:	d301      	bcc.n	8000c1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c16:	2301      	movs	r3, #1
 8000c18:	e00f      	b.n	8000c3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <SysTick_Config+0x40>)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c22:	210f      	movs	r1, #15
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	f7ff ff8e 	bl	8000b48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c2c:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <SysTick_Config+0x40>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c32:	4b04      	ldr	r3, [pc, #16]	; (8000c44 <SysTick_Config+0x40>)
 8000c34:	2207      	movs	r2, #7
 8000c36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	e000e010 	.word	0xe000e010

08000c48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f7ff ff47 	bl	8000ae4 <__NVIC_SetPriorityGrouping>
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b086      	sub	sp, #24
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	4603      	mov	r3, r0
 8000c66:	60b9      	str	r1, [r7, #8]
 8000c68:	607a      	str	r2, [r7, #4]
 8000c6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c70:	f7ff ff5c 	bl	8000b2c <__NVIC_GetPriorityGrouping>
 8000c74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	68b9      	ldr	r1, [r7, #8]
 8000c7a:	6978      	ldr	r0, [r7, #20]
 8000c7c:	f7ff ff8e 	bl	8000b9c <NVIC_EncodePriority>
 8000c80:	4602      	mov	r2, r0
 8000c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c86:	4611      	mov	r1, r2
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff ff5d 	bl	8000b48 <__NVIC_SetPriority>
}
 8000c8e:	bf00      	nop
 8000c90:	3718      	adds	r7, #24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f7ff ffb0 	bl	8000c04 <SysTick_Config>
 8000ca4:	4603      	mov	r3, r0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b089      	sub	sp, #36	; 0x24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
 8000cca:	e159      	b.n	8000f80 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ccc:	2201      	movs	r2, #1
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	697a      	ldr	r2, [r7, #20]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	f040 8148 	bne.w	8000f7a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f003 0303 	and.w	r3, r3, #3
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d005      	beq.n	8000d02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d130      	bne.n	8000d64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	2203      	movs	r2, #3
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	43db      	mvns	r3, r3
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	4013      	ands	r3, r2
 8000d18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	68da      	ldr	r2, [r3, #12]
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d38:	2201      	movs	r2, #1
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	4013      	ands	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	091b      	lsrs	r3, r3, #4
 8000d4e:	f003 0201 	and.w	r2, r3, #1
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 0303 	and.w	r3, r3, #3
 8000d6c:	2b03      	cmp	r3, #3
 8000d6e:	d017      	beq.n	8000da0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	4013      	ands	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	689a      	ldr	r2, [r3, #8]
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f003 0303 	and.w	r3, r3, #3
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d123      	bne.n	8000df4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	08da      	lsrs	r2, r3, #3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3208      	adds	r2, #8
 8000db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000db8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	f003 0307 	and.w	r3, r3, #7
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	220f      	movs	r2, #15
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	691a      	ldr	r2, [r3, #16]
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	08da      	lsrs	r2, r3, #3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	3208      	adds	r2, #8
 8000dee:	69b9      	ldr	r1, [r7, #24]
 8000df0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	2203      	movs	r2, #3
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 0203 	and.w	r2, r3, #3
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	f000 80a2 	beq.w	8000f7a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	4b57      	ldr	r3, [pc, #348]	; (8000f98 <HAL_GPIO_Init+0x2e8>)
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3e:	4a56      	ldr	r2, [pc, #344]	; (8000f98 <HAL_GPIO_Init+0x2e8>)
 8000e40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e44:	6453      	str	r3, [r2, #68]	; 0x44
 8000e46:	4b54      	ldr	r3, [pc, #336]	; (8000f98 <HAL_GPIO_Init+0x2e8>)
 8000e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e52:	4a52      	ldr	r2, [pc, #328]	; (8000f9c <HAL_GPIO_Init+0x2ec>)
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	089b      	lsrs	r3, r3, #2
 8000e58:	3302      	adds	r3, #2
 8000e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f003 0303 	and.w	r3, r3, #3
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	220f      	movs	r2, #15
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4013      	ands	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a49      	ldr	r2, [pc, #292]	; (8000fa0 <HAL_GPIO_Init+0x2f0>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d019      	beq.n	8000eb2 <HAL_GPIO_Init+0x202>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a48      	ldr	r2, [pc, #288]	; (8000fa4 <HAL_GPIO_Init+0x2f4>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d013      	beq.n	8000eae <HAL_GPIO_Init+0x1fe>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a47      	ldr	r2, [pc, #284]	; (8000fa8 <HAL_GPIO_Init+0x2f8>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d00d      	beq.n	8000eaa <HAL_GPIO_Init+0x1fa>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a46      	ldr	r2, [pc, #280]	; (8000fac <HAL_GPIO_Init+0x2fc>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d007      	beq.n	8000ea6 <HAL_GPIO_Init+0x1f6>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a45      	ldr	r2, [pc, #276]	; (8000fb0 <HAL_GPIO_Init+0x300>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d101      	bne.n	8000ea2 <HAL_GPIO_Init+0x1f2>
 8000e9e:	2304      	movs	r3, #4
 8000ea0:	e008      	b.n	8000eb4 <HAL_GPIO_Init+0x204>
 8000ea2:	2307      	movs	r3, #7
 8000ea4:	e006      	b.n	8000eb4 <HAL_GPIO_Init+0x204>
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e004      	b.n	8000eb4 <HAL_GPIO_Init+0x204>
 8000eaa:	2302      	movs	r3, #2
 8000eac:	e002      	b.n	8000eb4 <HAL_GPIO_Init+0x204>
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e000      	b.n	8000eb4 <HAL_GPIO_Init+0x204>
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	69fa      	ldr	r2, [r7, #28]
 8000eb6:	f002 0203 	and.w	r2, r2, #3
 8000eba:	0092      	lsls	r2, r2, #2
 8000ebc:	4093      	lsls	r3, r2
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ec4:	4935      	ldr	r1, [pc, #212]	; (8000f9c <HAL_GPIO_Init+0x2ec>)
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	089b      	lsrs	r3, r3, #2
 8000eca:	3302      	adds	r3, #2
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ed2:	4b38      	ldr	r3, [pc, #224]	; (8000fb4 <HAL_GPIO_Init+0x304>)
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	43db      	mvns	r3, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d003      	beq.n	8000ef6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ef6:	4a2f      	ldr	r2, [pc, #188]	; (8000fb4 <HAL_GPIO_Init+0x304>)
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000efc:	4b2d      	ldr	r3, [pc, #180]	; (8000fb4 <HAL_GPIO_Init+0x304>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	43db      	mvns	r3, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d003      	beq.n	8000f20 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f20:	4a24      	ldr	r2, [pc, #144]	; (8000fb4 <HAL_GPIO_Init+0x304>)
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f26:	4b23      	ldr	r3, [pc, #140]	; (8000fb4 <HAL_GPIO_Init+0x304>)
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4013      	ands	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d003      	beq.n	8000f4a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f4a:	4a1a      	ldr	r2, [pc, #104]	; (8000fb4 <HAL_GPIO_Init+0x304>)
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f50:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <HAL_GPIO_Init+0x304>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d003      	beq.n	8000f74 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f74:	4a0f      	ldr	r2, [pc, #60]	; (8000fb4 <HAL_GPIO_Init+0x304>)
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	61fb      	str	r3, [r7, #28]
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	2b0f      	cmp	r3, #15
 8000f84:	f67f aea2 	bls.w	8000ccc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	3724      	adds	r7, #36	; 0x24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40013800 	.word	0x40013800
 8000fa0:	40020000 	.word	0x40020000
 8000fa4:	40020400 	.word	0x40020400
 8000fa8:	40020800 	.word	0x40020800
 8000fac:	40020c00 	.word	0x40020c00
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	40013c00 	.word	0x40013c00

08000fb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	691a      	ldr	r2, [r3, #16]
 8000fc8:	887b      	ldrh	r3, [r7, #2]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d002      	beq.n	8000fd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	73fb      	strb	r3, [r7, #15]
 8000fd4:	e001      	b.n	8000fda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	807b      	strh	r3, [r7, #2]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ff8:	787b      	ldrb	r3, [r7, #1]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ffe:	887a      	ldrh	r2, [r7, #2]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001004:	e003      	b.n	800100e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001006:	887b      	ldrh	r3, [r7, #2]
 8001008:	041a      	lsls	r2, r3, #16
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	619a      	str	r2, [r3, #24]
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
	...

0800101c <__libc_init_array>:
 800101c:	b570      	push	{r4, r5, r6, lr}
 800101e:	4d0d      	ldr	r5, [pc, #52]	; (8001054 <__libc_init_array+0x38>)
 8001020:	4c0d      	ldr	r4, [pc, #52]	; (8001058 <__libc_init_array+0x3c>)
 8001022:	1b64      	subs	r4, r4, r5
 8001024:	10a4      	asrs	r4, r4, #2
 8001026:	2600      	movs	r6, #0
 8001028:	42a6      	cmp	r6, r4
 800102a:	d109      	bne.n	8001040 <__libc_init_array+0x24>
 800102c:	4d0b      	ldr	r5, [pc, #44]	; (800105c <__libc_init_array+0x40>)
 800102e:	4c0c      	ldr	r4, [pc, #48]	; (8001060 <__libc_init_array+0x44>)
 8001030:	f000 f818 	bl	8001064 <_init>
 8001034:	1b64      	subs	r4, r4, r5
 8001036:	10a4      	asrs	r4, r4, #2
 8001038:	2600      	movs	r6, #0
 800103a:	42a6      	cmp	r6, r4
 800103c:	d105      	bne.n	800104a <__libc_init_array+0x2e>
 800103e:	bd70      	pop	{r4, r5, r6, pc}
 8001040:	f855 3b04 	ldr.w	r3, [r5], #4
 8001044:	4798      	blx	r3
 8001046:	3601      	adds	r6, #1
 8001048:	e7ee      	b.n	8001028 <__libc_init_array+0xc>
 800104a:	f855 3b04 	ldr.w	r3, [r5], #4
 800104e:	4798      	blx	r3
 8001050:	3601      	adds	r6, #1
 8001052:	e7f2      	b.n	800103a <__libc_init_array+0x1e>
 8001054:	0800107c 	.word	0x0800107c
 8001058:	0800107c 	.word	0x0800107c
 800105c:	0800107c 	.word	0x0800107c
 8001060:	08001080 	.word	0x08001080

08001064 <_init>:
 8001064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001066:	bf00      	nop
 8001068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800106a:	bc08      	pop	{r3}
 800106c:	469e      	mov	lr, r3
 800106e:	4770      	bx	lr

08001070 <_fini>:
 8001070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001072:	bf00      	nop
 8001074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001076:	bc08      	pop	{r3}
 8001078:	469e      	mov	lr, r3
 800107a:	4770      	bx	lr
